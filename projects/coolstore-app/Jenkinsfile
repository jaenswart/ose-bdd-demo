#!groovy
import groovy.json.JsonSlurper

def version

node('ose-agent') {
    
    def WORKSPACE = pwd()
    def mvnHome = tool 'maven'
    env.KUBECONFIG = pwd() + "/.kubeconfig"
   
   stage 'Checkout'

       checkout scm

    stage 'OpenShift Build'

        version = parseVersion("${WORKSPACE}/package.json")+"-${env.BUILD_NUMBER}"
      
        try {
            
            login()
            
            sh """
             set +x
             currentOutputName=\$(oc get bc ${OPENSHIFT_SOURCE_APPLICATION} -n ${OPENSHIFT_SOURCE_PROJECT} --template='{{ .spec.output.to.name }}')
             newImageName=\${currentOutputName%:*}:${version}
             oc patch bc ${OPENSHIFT_SOURCE_APPLICATION} -n ${OPENSHIFT_SOURCE_PROJECT} -p "{ \\"spec\\": { \\"output\\": { \\"to\\": { \\"name\\": \\"\${newImageName}\\" } } } }"
             echo "registry=http://\${NEXUS_SERVICE_HOST}:\${NEXUS_SERVICE_PORT}/content/groups/npm-all/" >> ${WORKSPACE}/.npmrc
             oc start-build ${OPENSHIFT_SOURCE_APPLICATION} -n ${OPENSHIFT_SOURCE_PROJECT} --follow=true --wait=true --from-dir="${WORKSPACE}"
            """
            
            deployApp("$OPENSHIFT_SOURCE_APPLICATION", "$OPENSHIFT_SOURCE_PROJECT", version)
            
            validateDeployment("$OPENSHIFT_SOURCE_APPLICATION","$OPENSHIFT_SOURCE_PROJECT")
                
        }
        catch(e) {
            currentBuild.result = 'FAILURE'
            throw e
        }
        finally {
            processStageResult()
        }          
}
        
    stage "Deploy to Production"
   
        input "Deploy Application to Production?"

node('ose-agent') {
 
        try {    

            login()

            sh """
              set +x
              echo "Promoting application to Prod Environment"
              oc tag ${OPENSHIFT_SOURCE_PROJECT}/${OPENSHIFT_SOURCE_APPLICATION}:${version} ${OPENSHIFT_DESTINATION_PROJECT}/${OPENSHIFT_DESTINATION_APPLICATION}:${version}
              # Sleep for a few moments
              sleep 5
            """

            deployApp("$OPENSHIFT_DESTINATION_APPLICATION", "$OPENSHIFT_DESTINATION_PROJECT", version)

            validateDeployment("$OPENSHIFT_DESTINATION_APPLICATION","$OPENSHIFT_DESTINATION_PROJECT")            

        }
        catch(e) {
            currentBuild.result = 'FAILURE'
            throw e
        }
        finally {
            processStageResult()
        }        
}

def processStageResult() {

    if (currentBuild.result != null) {
        sh "exit 1"
    }
}

def login() {
    sh """
       set +x
       oc login --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt --token=\$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) https://kubernetes.default.svc.cluster.local >/dev/null 2>&1 || echo 'OpenShift login failed'
       """
}

def parseVersion(String fileName) {
    def file =  readFile(fileName)
    return new JsonSlurper().parseText(file).version
}

def deployApp(appName, namespace, version) {
            sh """
          set +x
          newDeploymentImageName=${appName}:${version}
          imageReference=\$(oc get is ${appName} -n ${namespace} -o jsonpath="{.status.tags[?(@.tag==\\"${version}\\")].items[*].dockerImageReference}")
          oc patch dc/${appName} -n ${namespace} -p "{\\"spec\\":{\\"template\\":{\\"spec\\":{\\"containers\\":[{\\"name\\":\\"${appName}\\",\\"image\\": \\"\${imageReference}\\" } ]}}, \\"triggers\\": [ { \\"type\\": \\"ImageChange\\", \\"imageChangeParams\\": { \\"containerNames\\": [ \\"${appName}\\" ], \\"from\\": { \\"kind\\": \\"ImageStreamTag\\", \\"name\\": \\"\${newDeploymentImageName}\\" } } } ] }}"
          oc deploy ${appName} -n ${namespace} --latest
          # Sleep for a few moments
          sleep 5
        """


}


def validateDeployment(String dcName, String namespace) {

    sh """
      set +x
      COUNTER=0
      DELAY=10
      MAX_COUNTER=30
      echo "Validating deployment of ${dcName} in project ${namespace}"
      LATEST_DC_VERSION=\$(oc get dc ${dcName} -n ${namespace} --template='{{ .status.latestVersion }}')
      RC_NAME=${dcName}-\${LATEST_DC_VERSION}
      set +e
      while [ \$COUNTER -lt \$MAX_COUNTER ]
      do
        RC_ANNOTATION_RESPONSE=\$(oc get rc -n ${namespace} \$RC_NAME --template="{{.metadata.annotations}}")
        echo "\$RC_ANNOTATION_RESPONSE" | grep openshift.io/deployment.phase:Complete >/dev/null 2>&1
        if [ \$? -eq 0 ]; then
          echo "Deployment Succeeded!"
          break
        fi
        echo "\$RC_ANNOTATION_RESPONSE" | grep -E 'openshift.io/deployment.phase:Failed|openshift.io/deployment.phase:Cancelled' >/dev/null 2>&1
        if [ \$? -eq 0 ]; then
          echo "Deployment Failed"
          exit 1
        fi
        if [ \$COUNTER -lt \$MAX_COUNTER ]; then
          echo -n "."
          COUNTER=\$(( \$COUNTER + 1 ))
        fi
        if [ \$COUNTER -eq \$MAX_COUNTER ]; then
          echo "Max Validation Attempts Exceeded. Failed Verifying Application Deployment..."
          exit 1
        fi
        sleep \$DELAY
      done
      set -e
    """
}
